1. Napisz program w którym dla wczytanej przez użytkownika liczby wypiszę ilość wystąpień multiplikatywnych, czyli liczbę razy, przez którą należy pomnożyć poszczególne
cyfry zmiennej typu int, aż do otrzymania pojedynczej cyfry.

Przykładowo: count_multiplicate(39) ➞ 3, ponieważ 3 * 9 = 27, 2 * 7 = 14, 1 * 4 = 4 -> 4 jest pojedynczą cyfrą i program do uzyskania wyniku potrzebował trzech mnożeń.
count_multiplicate(999) ➞ 4, ponieważ 9 * 9 * 9 = 729, 7 * 2 * 9 = 126, 1 * 2 * 6 = 12, 1 * 2 = 2 -> 2 jest pojedynczą cyfrą, wynikiem jest 4.

Aby liczbę ze zmiennej integer podzielić na zmienne typu całkowitego przechowujące poszczególne cyfry, należy zastosować operacje modulo ("%") oraz wykorzystać dzielenia
do rzędów jedności, dziesiątek, setek, tysięcy itp.

Przykładowo dla liczby 39, aby "wydobyć" ostatnią cyfrę należy zastosować operację 39%10 = 9. Kolejne cyfry wymagają dodatkowo zastosowania dzielenia.

W programie należy w kolejnych liniach wyświetlać wynik mnożenia oraz wartości zmiennych przechowujących nowe cyfry.

***************************************************************************************************

2. Sekwencja "ślepego zaułka":
Funkcja przyjmuje dodatnią liczbę całkowitą podaną przez użytkownika (n). Zmienna s jest sumą poszczególnych cyfr w liczbie n. Jeżeli n jest podzielne przez s to kolejną
badaną liczbą jest wynik działania n/s, w przeciwnym wypadku wynikiem jest n*s. W pewnym momencie sekwencji wynikami będa dwie naprzemienne wartości zmiennych określane
jako "ślepy zaułek". Przykładowo dla danej wejściowej n równej 58 otrzymamy następujący wynik:

58 -> 754 -> 12064 -> 928 -> 17632 -> 928 -> 17632 -> 928 -> ...

Napisz program który dla podanej wartości zmiennej n wyświetli ilość działań wykonanych do momentu uzyskania "ślepego zaułka" - dwóch zmiennych powtarzających się
w wynikach obliczeń oraz ostatniej wartości zmiennej n która nie powtarza się w sekwencji. Dla powyższego przykładu (wartość zmiennej 58) wynikiem działania funkcji jest:

deadEnd(5) ➞ [5, 17632]

***************************************************************************************************

3. Szczęśliwe liczby:
Dla podanej dodatniej liczby całkowitej możemy utworzyć nowe liczby na podstawie wzoru który sumuje kwadraty poszczególnych cyfr w liczbie. Przykładowo dla n=203 otrzymaną
nową liczbą będzie 13, ponieważ 4 + 0 + 9 = 13. Jeżeli będziemy powtarzać obliczenia to otrzymamy następującą sekwencję liczb:

203 -> 13 -> 10 -> 1 -> 1

Czasami, jak w przykładzie powyższym otrzymamy sekwencję liczb w której ostatnią wartością będzie liczba 1. Takie liczby nazywane są liczbami szczęśliwymi (Happy Numbers).
Nie wszytkie liczby są liczbami szczęśliwymi. Przykładowo dla n=11 otrzymamy następującą sekwencję:

11 -> 2 -> 4 -> 16 -> ...

Powyższa sekwencja nigdy nie zakończy się na wyniku 1, wobec tego liczba taka nazywana jest nieszczęśliwą (Unhappy Number)

Napisz program, który dla podanej przez użytkownika dodatniej liczby całkowitej wyświetli informację, czy liczba jest szczęśliwa czy nieszczęśliwa. Dla obu przypadków
wyświetl sekwencje z obliczeniami (dla liczby nieszczęśliwej ogranicz wyświetlanie wyników do 20 liczb).

Przykładowo:
is_happy(203) ➞ true ➞ "Liczba 203 jest szczęśliwa, ponieważ x -> y -> z -> ... "

is_happy(11) ➞ false ➞ "Liczba 11 jest nieszczęśliwa, ponieważ x -> y -> z -> ... "

is_happy(107) ➞ false ➞ "Liczba 107 jest nieszczęśliwa, ponieważ x -> y -> z -> ..."

***************************************************************************************************

4. Szczęśliwe liczby (wersja tablicowa):

Badany jest ciąg liczb całkowitych w tablicy o wartościach 0 lub 1:

[0, 1, 0, 0, 0, 1, 1, 1, 0, 1]

Liczba 1 w tablicy jest liczbą nieszczęśliwą, jeżeli liczby po jej lewej i prawej stronie mają wartość 0.
Liczba 0 w tablicy jest liczbą nieszczęśliwą, jeżeli liczby po jej lewej i prawej stronie mają wartość 1.
Jeżeli liczba ma tylko jednego sąsiada, ta liczba jest nieszczęśliwa, jeżeli sąsiad posiada inną wartość liczbową niż liczba badana.
    W przeciwnym wypadku badana liczba jest liczbą szczęśliwą.
    
W powyższym przykładzie:
- pierwszy element (0) oraz element ostatni (1) tablicy to liczby nieszczęśliwe
- drugi element tablicy (1) jest liczbą nieszczęśliwą
- przedostatni element tablicy (0) jest liczbą nieszczęśliwą
- pozostałe liczby w tablicy są liczbami szczęśliwymi

Napisz program która wczyta od użytkownika rozmiar tablicy liczb całkowitych. Program następnie wczytuje od użytkownika liczby do tablicy (wartości 0 lub 1, jeżeli
użytkownik poda inną liczbą, program powinien o tym poinformować i ponownie poprosić użytkownika i podanie wartości dla danego indeksu tablicy). Wynikiem działania
programu jest stosunek liczb szczęśliwych do wszystkich liczb w tablicy, wyrażony w procentach:

happy numbers = (happy 0s + happy 1s) / total numbers * 100

Wynikiem działania programu dla powyższego zbioru liczb [0, 1, 0, 0, 0, 1, 1, 1, 0, 1] jest 0.6 (60% liczb szczęśliwych), ponieważ:

0 1 0 0 0 1 1 1 0 1
N N S S	S S S S	N N

happy numbers = (3 + 3)/10 * 100 = 60 ("%")

Przykłady działania funkcji dla innych zbiorów liczb:

portionHappy([0, 1, 0, 1, 0]) ➞ 0 (0%)
portionHappy([0, 1, 1, 0]) ➞ 0.5 (50%)
portionHappy([0, 0, 0, 1, 1]) ➞ 1 (100%)
portionHappy([1, 0, 0, 1, 1]) ➞ 0.8 (80%)


***************************************************************************************************

5. Punkty podparcia - wersja tablicowa

Punktem podparcia w tablicy liczb całkowitych jest taka liczba, że wszystkie elementy na lewej od niej i wszystkie elementy na prawo od niej sumują się do tej 
samej wartości.

Przykładowo:

findFulcrum([3, 1, 5, 2, 4, 6, -1]) ➞ 2 , ponieważ [3,1,5] (elementy po lewej stronie od badanej liczby) i [4,6,-1] (elementy po prawej stronie od badanej liczby)
sumują się do 9.

Napisz funkcję która sprawdzi tablicę pod kątem wystąpienia punktu podparcia (jeżeli taki punkt w tablicy się nie znajduje, to program wyświetli stosowną informację).
Dane wejściowe podawane przez użytkownika to wielkość tablicy oraz liczby całkowite.

Przykłady to testowania poprawności programu:

findFulcrum([1, 2, 4, 9, 10, -10, -9, 3]) ➞ 4
findFulcrum([9, 1, 9]) ➞ 1
findFulcrum([7, -1, 0, -1, 1, 1, 2, 3]) ➞ 0
findFulcrum([8, 8, 8, 8]) ➞ -1

***************************************************************************************************

6. Parowanie skarpetek

Dysponujesz tablicą liczb całkowitych. Liczby te reprezentują różne kolory skarpetek. Napisz program, a w nim odpowiednią funkcję, która na podstawie wielkości tablicy
oraz liczb całkowitych (reprezentujących kolory skarpetek) wprowadzonych przez użytkownika wyświetli na ekranie ilość sparowanych skarpetek. 

Przykładowo:

sockMerchant[1, 2, 1, 2, 1, 3, 2] ➞ 2 , ponieważ z 7 dostępnych kolorów skarpetek uda się wydobyć 2 pary o takim samym kolorze - są to pary o numerze 1 oraz 2.

Trzy skarpetki zostają bez pary:

[1,  2,  1,  2,  1,  3,  2]
P1   P2  P1  P2  X   X   X

Przykłady do testowania poprawności programu:
sockMerchant([10, 20, 20, 10, 10, 30, 50, 10, 20]) ➞ 3
sockMerchant([50, 20, 30, 90, 30, 20, 50, 20, 90]) ➞ 4
sockMerchant([]) ➞ 0

***************************************************************************************************

7. Powtarzający się cykl

Poniżej widoczny jest przykład tablicy wypełnionej liczbami całkowitymi, w której występuje powtarzający się cykl:

isRepeatingCycle([1, 2, 3, 1, 2], 3) => true , ponieważ pierwsze dwa elementy z podzbioru [1,2,3] występują na 4 i 5 pozycji w tablicy

Poniżej widoczny jest przykład tablicy wypełnionej liczbami całkowitymi, w której NIE występuje powtarzający się cykl:

isRepeatingCycle([1, 2, 3, 1, 3], 3) => false , ponieważ [1,2,3] != [1,3]

Napisz funkcję która przyjmuje dwa argumenty:
1. Tablicę liczb całkowitych
2. Długość cyklu który będzie sprawdzany

Funkcja zwraca wartość logiczną "true", jeżeli w tablicy występuje powtarzjacy się cykl, lub "false", jeżeli cykl ten nie występuje.

WSZYSTKIE elementy sprawdzane w tablicy muszą być zgodne z wzorcem (długością cyklu). Przykładowo:
isRepeatingCycle([1, 2, 3, 1, 2], 3) => true , ponieważ sprawdzanie elementów tablicy kończy się na drugiej pozycji wzorca ( [1,2,3] <=> [1,2] )
isRepeatingCycle([1, 2, 3, 1, 2, 1], 3) => false , ponieważ ostatni element tablicy łamie szyk ( [1,2,3] != [1,2,1] )

Przykłady do testowania poprawności programu:

isRepeatingCycle([1, 2, 3, 1, 2, 3, 1], 3) ➞ true
isRepeatingCycle([1, 2, 3, 4, 2, 3, 1], 4) ➞ false
isRepeatingCycle([1, 2, 1, 2, 2], 2) ➞ false
isRepeatingCycle([1, 1, 1, 1], 3) ➞ true

***************************************************************************************************

8. Napisz program który będzie symulował grę w Blackjacka (oczko) dla dwóch osób. Gra polega na "losowaniu" (generowaniu liczb pseudolosowych) karty z talii kart,
oraz dodaniu do wyniku gracza wartości tej karty. Zasadniem gracza jest uzyskanie jak najbliżej (ale nie więcej niż) 21 punktów. Zasady punktowania kart:
- karty od 2 do 9 oczek - mają tyle samo punktów, co oczek
- "10", Walet, Dama, Król - mają po 10 punktów
- As - ma 1 lub 11 punktów. Po wylosowaniu asa gracz sam decyduje czy jest on punktowany za 1 czy za 11.

Wytyczne do programu:
- Gra Blackjack jest grą dla dwóch osób - wygrywa ta osoba która uzyska wynik bliższy 21 punktów.
- Program na podstawie "rzutu monetą" (liczby pseudolosowej) decyduje o tym który gracz zaczyna grę.
- Losowanie odbywa się naprzemiennie, np. gracz 1 losuje kartę -> program pyta gracza 1 czy zachować wynik -> gracz 2 losuje kartę -> ...
- Gdy program wylosuje kartę "As" - pyta użytkownika czy do wyniku dodać 1 lub 11 punktów.
- Gry gracz przekroczy 21 punktów - wygrywa przeciwnik.
- Gdy gracze mają poniżej 21 punktów - wygrywa ta osoba, która uzyskała wynik bliższy 21.

***************************************************************************************************

9. Napisz program który będzie symulował grę w "Wisielca" (ang. Hangman) dla dwóch osób. Gra polega na podaniu hasła przez gracza i odgadnięciu tego hasła przez
gracza drugiego przy jednoczesnym podawaniu spółgłosek i samogłosek. Gra zmodyfikowana w następujący sposób:
- Pseudolosowość programu decyduje o tym, czy gracz pierwszy lub drugi zaczyna grę (podaje hasło)
- Program po wczytaniu hasła przez gracza rozpoczynającego wymazuje zawartość na ekranie (system("CLS"))
- Program wyświetla dla gracza drugiego hasło w zaszyfrowanej postaci, np. "------_----_-----", gdzie "-" oznacza litery nieodgadnięte, "_" oznacza odstęp między wyrazami
- Gracz odgadujący hasło podaje jedną samogłoskę i trzy spółgłoski
- Gracz odgadujący hasło decyduje (za pomocą instrukcji wyboru) czy podaje literę czy odgaduje hasło. Zastosuj funkcję czyszczenia ekranu po dokonaniu wyboru oraz wyświetl aktualny stan punktów.
- Zaimplementuj w programie własny system zliczania punktów. Przykładowo za każdą nietrafioną literę w haśle gracz traci X punktów, a za odgadnięte hasło dostaje
Y punktów zależne od brakujących liter. 
- Wyświetl w programie za pomocą funkcji (modułu) instrukcje do gry oraz wyświetl nazwę gry stosując ASCII generator tekstu (np. https://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20)

***************************************************************************************************

10. Napisz program który będzie symulował grę kośćmi a'la Poker. Gra polega na jednoczesnym rzucie pięcioma kostkami do gry (oczka od 1 do 6) i przeznaczona jest dla dwóch graczy.
Zasady gry:
- Pseudolosowość programu decyduje o tym, czy pierwszy lub drugi gracz rozpoczyna grę
- Rozpoczynający grę gracz otrzymuje na ekranie wynik rzutu losowego pięciu kostek do gry (na kościach oczka od 1 do 6)
- Gracz decyduje które pary kostek zostaną "zachowane", na których liczba oczek jest taka sama (program wyświetli na ekranie jakie wyniki na kostkach się pokrywają). 
W takiej sytuacji gracz otrzymuje do wyniku liczbę punktów równą oczkom na jednej LUB drugiej kostce (np. z pięciu kostek dwie wylosowały 6 i 6 -> gracz otrzymuje 6 punktów i ta para kostek jest "odkładana na bok"
- Gracz może "zachować" trzy kostki, kiedy wynik losowania oczek na wszystkich trzech kostkach jest taki sam. Wówczas do wyniku dodaje się dwukrotność oczek na jednej z
kostek (np. z pięciu kostek trzy wylosowały 5 oczek -> gracz otrzymuje 5*2 = 10 punktów i te trzy kostki są odkładane na bok)
- Gracz po losowaniu decyduje (za pomocą instrukcji wyboru) które kostki zachowuje, a które losuje ponownie. Gracz ma możliwość ponownego rzutu, raz na daną kostkę
- W sytuacji gdy 4 lub 5 kości zostało "odłożonych", lub zostały wyczerpane możliwości ponownego rzutu kośćmi, program wyświetla ostateczny wynik gracza oraz grę rozpoczyna gracz kolejny
- Program po decyzjach gracza drugiego wyświetla ostateczny wynik obu graczy, oraz który gracz zwyciężył
- Zastosuj w programie funkcje system("cls") aby zwiększyć czytelność wyświetlanych wyników

***************************************************************************************************

11. Seven Ate Nine

Liczba całkowita znajdująca się w komórce tablicy jednowymiarowej może "zjeść" liczbę po swojej prawej stronie jeżeli ta liczba jest mniejsza od badanej.
Po "zjedzeniu" tej liczby, nowa liczba staje się sumą liczby badanej oraz liczby "zjadanej".
Utwórz funkcję która zwróci wartości nowych komórek w tablicy gdy badana liczba zakończy swoją ucztę (wyczerpie możliwości zjedzenia sąsiada po prawej stronie)  
Przykład:
[5, 3, 7] ➞ [8, 7] ➞ [15]
5 zjada 3 -> 8
8 zjada 7 -> 15

Przykłady do testowania poprawności programu:

nomNom([1, 2, 3]) ➞ [1, 2, 3]
nomNom([2, 1, 3]) ➞ [3, 3] 
nomNom([8, 5, 9]) ➞ [22]
nomNom([6, 2, 8, 7]) ➞ [8, 8, 7] (pomimo tego, że 8>7 program nie wykonuje operacji zjadania ponieważ zakończył swoje działanie dla wartości 6 i 2)
nomNom([1, 2, 3, 2, 1, 8]) ➞ [1, 2, 6, 8] (program rozpoczyna zjadanie od wartości 3, kończąc na 1)

***************************************************************************************************

12. Pierwsze Tryplety

Trypletem liczb pierwszych nazwiemy grupę trzech liczb pierwszych których różnica między kolejnymi liczbami wynosi 6
oraz suma najmniejszej liczby pierwszej (z tych trzech) powiększona o 18 to liczba złożona.

Napisz funkcję które zwróci tablicę trypletów dla liczb z zakresu podanego przez użytkownika.

Przykład:

primeTriplets(1, 19) ➞ [7, 13, 19], ponieważ:
7 + 6 = 13 + 6 = 19 oraz 7 + sumują się do 25 (liczba złożona)

Przykłady do testowania programu:
primeTriplets(5, 17) ➞ [ ] (NULL)
// pomimo tego, że [5, 11, 17] to tryplet liczb pierwszych, to 5 + 18 = 23 -> nie jest liczbą złożoną
primeTriplets(64, 88) ➞ [67, 73, 79]
// 67 + 6 = 73 + 6 = 79 oraz 67 + 18 = 85

***************************************************************************************************

13. Zegar binarny

Zegar binarny to urządzenie któe wyświetla czas w formacie binarnym (dwójkowym). Wspólczesne zegary binarne mają sześć kolumn w które wbudowane są diody LED:
- dwie kolumny które wyznaczają godzinę w formacie HH
- dwie kolumny które wyznaczają minuty w formacie MM
- dwie kolumny które wyznaczają sekundy w formacie SS

Wartości binarne wzrastają od dołu do górnego rzędu. Światełka w najniższym rzędzie mają wartość 1, powyżej mają wartość 2, następnie 4 i ostatni rząd to 8.
Każdy czas w formacie 24-godzinnym można przedstawić na urządzeniu poprzez włączenie odpowiedniej kombinacji świateł.

Przykładowo, aby wyświetlić czas 10:37:49: (X oznacza światło włączone, O oznacza wyłączone)
    H    H  |  M   M  |  S    S   
8        O  |      O  |       X
4        O  | O    X  |  X    O
2   O    O  | X    X  |  O    O
1   X    O  | X    X  |  O    X
    1    0    3    7     4    9

Napisz funkcję która wczyta jako argument czas podany przez użytkownika w formacie HH-MM-SS. Program następnie wyświetli ten czas w zegarze binarnym (jako tablica dwuwymiarowa).

Przykłady do testowania poprawności programu:
binaryClock("10:37:49") ➞ [
  " 0 0 1",
  " 00110",
  "001100",
  "101101"
]
binaryClock("18:57:31") ➞ [
  " 1 0 0",
  " 01100",
  "000110",
  "101111"
]
binaryClock("10:50:22") ➞ [
  " 0 0 0",
  " 01000",
  "000011",
  "101000"
]

***************************************************************************************************

14. Symetryczne wzory

Janusz jest właścicielem sklepu z dywanami. W swoim sklepie przydziela dywan do jednej z czterech wykluczających się grup:

- niedoskonały
- doskonały
- poziomo symetryczny
- pionowo symetryczny

Niedoskonały dywan to taki, który nie jest symetryczny ani w poziomie, ani w pionie. Przykładem niesymetrycznego dywanu jest tablica:
[
  ["a", "a", "a", "a"],
  ["a", "a", "a", "a"],
  ["a", "a", "b", "b"]
]
Poniżej znajduje się dywanik o symetrii poziomej. Można "złożyć" dywan wokół hipotetycznej osi X i obie strony będą identyczne.
Dywan symetryczny poziomo NIE JEST symetryczny pionowowo (wówczas byłby sklasyfikowany jako idealny). Przykład dywanu symetrycznie poziomego:
[
  ["c", "a", "a", "a"],
  ["b", "b", "b", "b"],
  ["c", "a", "a", "a"]
]
Poniżej znajduje się dywanik o symetrii pionowej. Można "złożyć" dywan wokół hipotetycznej osi Y i obie strony będą identyczne.
Dywan symetryczny pionowo NIE JEST symetryczny poziomoi (wówczas byłby sklasyfikowany jako idealny). Przykład dywanu symetrycznie pionowego:
[
  ["a", "b", "a"],
  ["b", "b", "b"],
  ["a", "b", "a"],
  ["a", "b", "a"]
]
Wreszcie, idealny dywan to taki, który jest symetryczny zarówno w pionie, jak i w poziomie. Oznacza to, że po złożeniu wzdłuż lub wszerz powstają dwie identyczne części:
[
  ["a", "b", "b", "a"],
  ["b", "b", "b", "b"],
  ["a", "b", "b", "a"]
]

Mając do dyspozycji tablicę duwymiarową (m x n) określ, czy jest on niedoskonały, symetryczny pionowo, symetryczny poziomo czy idealny.
Przykłady do testowania poprawności działania programu:
classifyRug([verti
  ["a", "a"],
  ["a", "a"]
]) ➞ "idealny"

classifyRug([
  ["a", "a", "b"],
  ["a", "a", "a"],
  ["b", "a", "a"]
]) ➞ "niedoskonały"

classifyRug([
  ["b", "a"],
  ["b", "a"]
]) ➞ "symetryczny poziomo"

classifyRug([
  ["a", "a"],
  ["b", "b"]
]) ➞ "symetryczny pionowo"

*Dywan 1 x n można uznać za trywialnie symetryczny w poziomie, natomiast dywanik n x 1 za trywialnie symetryczny w pionie. Dywan 1 x 1 jest dywanem trywialnie doskonałym.

***************************************************************************************************

15. Skacząca żaba

Żaba chce przeskoczyć przez rzekę. Niestety nie potrafi przeskoczyć jednym skokiem. Na szczęście na rzece jest n ilość kamieni.
Żaba może przeskoczyć z pobliskiego przegu do kamienia 1 i z kamienia "n" do dalekiego brzegu. Potrafi również skakać z kamienia na kamień, do przodu i do tyłu.
Jednakże, na każdym kamieniu "i" jest zapisana liczba "j" i żaba musi przeskoczyć dokładnie "j" liczbę kamieni do tyłu lub do przodu (wartości ujemne oznaczają skok do tyłu).
Napisz program który zwróci minimalną liczbę skoków do przekroczenia rzeki, włączając w to skoki z brzegu do pierwszego kamienia i z ostatniego kamienia (lub innego kamienia, jeżeli jest to możliwe) na daleki brzeg. Program (funkcja) powinien zwrócić 0 jeśli nie jest możliwe przekroczenie rzeki.

Przykłady do testowania poprawności działania programu:

jumpingFrog(5, [1, 1, 1, 1, 1]) ➞ 6
jumpingFrog(5, [1, 3, 1, 1, 1]) ➞ 4
jumpingFrog(5, [1, 1, 0, 1, 1]) ➞ 0
jumpingFrog(4, [6, 0, 5, 1) ➞ 2
jumpingFrog(4, [1, 1, -2, 3]) ➞ 0 (ponieważ żaba nigdy nie dotrze na drugi brzeg - pomocne jest zastosowanie zmiennej typu bool która sprawdzi, czy kamień został już odwiedzony)

***************************************************************************************************

16. Kolizja asteroid

Dysponujesz w programie tablicą jednowymiarową składającą się z liczb całkowitych reprezentującą asteroidy ustawione w rzędzie.
Dla każdej asteroidy "i " w tablicy przypisana jest wielkość "k", a znak reprezentuje jej kierunek (wartości dodatnie oznaczają, że asteroida porusza się w prawo, ujemne oznaczają poruszanie się w lewo). Każda asteroida porusza się z tą samą prędkością.

Zwróc w programie stan asteroid po wszystkich kolizjach. Jeśli dwie asteroidy spotkają się, to mniejsza eksploduje (w jej miejsce "wskakuje" asteroida większa). Jeśli obie są tego samego rozmiaru, to obie eksplodują. Dwie asteroidy poruszające się w tym samym kierunku nigdy się nie spotkają.

Przykłady do testowania poprawności działania programu:

asteroidCollision([-2, -1, 1, 2]) ➞ [-2, -1, 1, 2]
asteroidCollision([-2, 1, 1, -2]) ➞ [-2, -2]
asteroidCollision([1, 1, -2, -2]) ➞ [-2, -2]
asteroidCollision([10, 2, -5]) ➞ [10]
asteroidCollision([8, -8]) ➞ []

***************************************************************************************************

17. Bitwa cyfer

Napisz program w którym zadeklarujesz zmienną typu całkowitego. Następnie w programie przez pętlę będa porównywane poszczególne pary cyfr w utworzonej zmiennej w nastepujący sposób:
Zakładając, że "j" oznacza ilość cyfr w zmiennej typu całkowitego, a "i" to pierwsza cyfra w zmiennej:
- i <-> j
- i+1 <-> j-1
- i+2 <-> j-2
...
Każde porównanie par ma na celu wyłonić zwycięzcę rundy - cyfrę większą od drugiej. Każdy wynik rundy przyczynia się do wyniku ostatecznego - zwycięzkie rundy lewej części liczby (licząc od środka) oraz zwycięzkie rundy prawej części liczby (licząc od środka). W przypadku gdy w parze
obie cyfry mają taką samą wartość, wówczas obie strony przegrywają aktualną rundę (dzieje się to również w sytuacji, gdy "schodząc do środka" w zmiennej typu całkowitego trafimy na sytuację, w ktrórej w parze mamy tą samą cyfrę - nieparzysta ilość cyfr w zmiennej).

Napisz w programie funkcję która przyjmie następujące argumenty:
- zmienną typu całkowitego
- znak 'l' lub 'p' 
a następnie funkcja zwróci wynik jako ilość zwycięskich rund z lewej/prawej strony od środka wyrazu (wybór określany przez 'l' - lewa lub 'p' - prawa)

Porównaj wyniki obu wywołań funkcji (dla 'l' i 'p') i wyświetl na ekranie wynik w postaci "Wygrywa lewa/prawa strona wynikiem X:Y" lub "Remis X:Y"

Przykłady do testowania poprawności działania programu:

x = 29659

2 i 9 = 0 / 1
9 i 5 = 1 / 1
6 i 6 = 1 / 1 -> pętla zakończona
Remis 1:1

x = 995498

9 i 8 = 1 / 0
9 i 9 = 1 / 0
5 i 4 = 2 / 0
Wygrywa lewa strona wynikiem 2:0

x = 578921445

5 i 5 = 0 / 0
7 i 4 = 1 / 0
8 i 4 = 2 / 0
9 i 1 = 3 / 0
2 i 2 (ten sam indeks) -> pętla zakończona
Wygrywa lewa strona 3:0

x = 32526431

3 i 1 = 1 / 0
2 i 3 = 1 / 1
5 i 4 = 2 / 1
2 i 6 = 2 / 2

Remis 2:2

***************************************************************************************************

18. Suma zamknięcia

Napisz funkcję która zwróci sumę LICZB uformowanych przez pierwsze i ostatnie CYFRY, aż do środka liczby. 
Podpowiedź: Nie istnieje gotowa funkcja w C++ która łączy cyfry w liczbę. Trzeba zastosować instrukcję która w umiejętny sposób wyznaczy część dziesiętną/jedności na podstawie badanej cyfry

closingInSum("2520") ➞ 72
// Pierwsza cyfra to 2, ostatnia to 0
// 2 i 0 dają 20
// Druga cyfra to 5, przedostatnia to 2
// 5 i 2 dają 52

// 20 + 52 = 72

Przykłady do testowania poprawności działania programu:

closingInSum("121") ➞ 13
// 11 + 2

closingInSum("1039") ➞ 22
// 19 + 3

closingInSum("22225555") ➞ 100
// 25 + 25 + 25 + 25

